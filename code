<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>2D Drawing App</title>
<link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="toolbar">
        <input type="color" id="colorPicker" value="#000000">
        <input type="range" id="brushSize" min="1" max="20" value="5">
        <button id="clearCanvas">Clear</button>
        <button id="saveImage">Save</button>
    </div>
    <canvas id="drawingCanvas"></canvas>
<script src="script.js"></script>
</body>
</html>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    height: 100vh;
    font-family: Arial, sans-serif;
}

.toolbar {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 10px;
}

#drawingCanvas {
    border: 2px solid #000;
    cursor: crosshair;
}

button {
    padding: 5px 10px;
    cursor: pointer;
    border: none;
    background-color: #007BFF;
    color: white;
    border-radius: 5px;
}

button:hover {
    background-color: #0056b3;
}
const canvas = document.getElementById('drawingCanvas');
const ctx = canvas.getContext('2d');
const colorPicker = document.getElementById('colorPicker');
const brushSize = document.getElementById('brushSize');
const clearCanvasBtn = document.getElementById('clearCanvas');
const saveImageBtn = document.getElementById('saveImage');

canvas.width = window.innerWidth * 0.8;
canvas.height = window.innerHeight * 0.7;

let painting = false;
let brushColor = colorPicker.value;
let brushWidth = brushSize.value;

function startPosition(e) {
    painting = true;
    draw(e);
}

function endPosition() {
    painting = false;
    ctx.beginPath(); // Reset path
}

function draw(e) {
    if (!painting) return;
    
    ctx.lineWidth = brushWidth;
    ctx.lineCap = 'round';
    ctx.strokeStyle = brushColor;

    ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
}

canvas.addEventListener('mousedown', startPosition);
canvas.addEventListener('mouseup', endPosition);
canvas.addEventListener('mousemove', draw);

colorPicker.addEventListener('input', (e) => brushColor = e.target.value);
brushSize.addEventListener('input', (e) => brushWidth = e.target.value);

clearCanvasBtn.addEventListener('click', () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
});

saveImageBtn.addEventListener('click', () => {
    const imageURI = canvas.toDataURL('image/png');
    const link = document.createElement('a');
    link.href = imageURI;
    link.download = 'drawing.png';
    link.click();
});
